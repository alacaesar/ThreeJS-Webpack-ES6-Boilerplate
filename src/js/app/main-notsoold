// Global imports -
import * as THREE from 'three';
import TWEEN from '@tweenjs/tween.js';
import anime from 'animejs';

// Local imports -
// Components
import Renderer from './components/renderer';
import Camera from './components/camera';
import Light from './components/light';
import Controls from './components/controls';
import Geometry from './components/geometry';

// Helpers
import Stats from './helpers/stats';
import MeshHelper from './helpers/meshHelper';

// Model
import Texture from './model/texture';
import Model from './model/model';

// Managers
import Interaction from './managers/interaction';
import DatGUI from './managers/datGUI';

//Other
import Events from './events';
import vars from './vars';

//Elements
import Globe from './elements/globe';
import Earth from './elements/earth';
import Stars from './elements/stars';
import Platform from './elements/platform';

// data
import Config from './../data/config';
// -- End of imports

import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';
import { CopyShader } from 'three/examples/jsm/shaders/CopyShader.js';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';
import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader.js';
import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';
import { FilmGrainShader } from './helpers/FilmGrainShader.js';
import { LensDistortionShader } from './helpers/LensDistortionShader.js';

var composer, renderPass, distortPass, grainPass, gammaPass, fxaaPass;

var params = {
  enableNoise: true,
  noiseSpeed: 0.02,
  noiseIntensity: 0.025,

  enableDistortion: true,
  baseIor: 1.0,
  bandOffset: 0.0,
  jitterIntensity: 1.0,
  samples: 7,
};

// This class instantiates and ties all of the components together, starts the loading process and renders the main loop
export default class Main {
  constructor(container) {
    // Set container property to container element
    this.container = container;

    // Start Three clock
    this.clock = new THREE.Clock();

    // Main scene creation
    this.scene = new THREE.Scene();
    this.scene.fog = new THREE.FogExp2(Config.fog.color, Config.fog.near);

    // Get Device Pixel Ratio first for retina
    if(window.devicePixelRatio) {
      Config.dpr = window.devicePixelRatio;
    }

    // Main renderer constructor
    this.renderer = new Renderer(this.scene, container);

    // Components instantiations
    this.camera = new Camera(this.renderer.threeRenderer);
    this.controls = new Controls(this.camera.threeCamera, container);
    this.light = new Light(this.scene);

    // Render Pass Setup
    renderPass = new RenderPass( this.scene, this.camera.threeCamera );
    grainPass = new ShaderPass( FilmGrainShader );
    //gammaPass = new ShaderPass( GammaCorrectionShader );
    fxaaPass = new ShaderPass( FXAAShader );
    distortPass = new ShaderPass( LensDistortionShader );
    distortPass.material.defines.CHROMA_SAMPLES = 7;

    composer = new EffectComposer( this.renderer.threeRenderer );
    composer.setSize( window.innerWidth, window.innerHeight );
    composer.setPixelRatio( window.devicePixelRatio );
    composer.addPass( renderPass );
    //composer.addPass( gammaPass );
    composer.addPass( fxaaPass );
    composer.addPass( distortPass );
    //composer.addPass( grainPass );

    /*
    anime.timeline({loop: true})
            .add({
                targets: params,
                baseIor: [1.35, 1.0],
                bandOffset: [0.03, 0.0],
                easing: "easeInOutExpo",
                duration: 3400,
                delay: 2000,
            }).add({
                targets: params,
                baseIor: [1.0, 1.35],
                bandOffset: [0.0, 0.03],
                duration: 2400,
                easing: "easeInOutExpo",
                delay: 1000
            });
    
      */
            

    // Create and place lights in scene
    const lights = ['ambient', 'directional', 'point', 'hemi'];
    lights.forEach((light) => this.light.place(light));

    // Create and place geo in scene
    /*
    this.geometry = new Geometry(this.scene);
    this.geometry.make('plane')(150, 150, 10, 10);
    this.geometry.place([0, -20, 0], [Math.PI / 2, 0, 0]);
    */

    // Set up rStats if dev environment
    if(Config.isDev && Config.isShowingStats) {
      this.stats = new Stats(this.renderer);
      this.stats.setUp();
    }

    // Set up gui
    if (Config.isDev) {
      this.gui = new DatGUI(this)
    }

    this.events = new Events();
    this.events.init(this);

    //this.globe = new Globe(this);
    //this.earth = new Earth(this);
    //this.stars = new Stars(this);
    this.platform = new Platform(this);
    

    // Instantiate texture class
    this.texture = new Texture();

    // Start loading the textures and then go on to load the model after the texture Promises have resolved
    /*
    this.texture.load().then(() => {
      
      this.manager = new THREE.LoadingManager();

      // Textures loaded, load model
      this.model = new Model(this.scene, this.manager, this.texture.textures);
      this.model.load(Config.models[Config.model.selected].type);

      // onProgress callback
      this.manager.onProgress = (item, loaded, total) => {
        console.log(`${item}: ${loaded} ${total}`);
      };

      // All loaders done now
      this.manager.onLoad = () => {
        // Set up interaction manager with the app now that the model is finished loading
        new Interaction(this.renderer.threeRenderer, this.scene, this.camera.threeCamera, this.controls.threeControls);

        // Add dat.GUI controls if dev
        if(Config.isDev) {
          this.meshHelper = new MeshHelper(this.scene, this.model.obj);
          if (Config.mesh.enableHelper) this.meshHelper.enable();

          this.gui.load(this, this.model.obj);
        }

        // Everything is now fully loaded
        Config.isLoaded = true;
        this.container.querySelector('#loading').style.display = 'none';
      };
    });
    */

    // Start render which does not wait for model fully loaded
    this.render();
  }

  render() {
    // Render rStats if Dev
    if(Config.isDev && Config.isShowingStats) {
      Stats.start();
    }

    // Call render function and pass in created scene and camera
    this.renderer.render(this.scene, this.camera.threeCamera);

    //grainPass.material.uniforms.noiseOffset.value += 0.02;
    //grainPass.material.uniforms.intensity.value = 0.03;

    distortPass.material.uniforms.baseIor.value = params.baseIor;
    distortPass.material.uniforms.bandOffset.value = params.bandOffset;
    //distortPass.material.uniforms.jitterOffset.value += 0.01;
    distortPass.material.uniforms.jitterIntensity.value = 1.0;

    //composer.render();

    // rStats has finished determining render call now
    if(Config.isDev && Config.isShowingStats) {
      Stats.end();
    }

    // loop functions
    var time = Date.now();
    for (var i in vars.loopFunctions){ 
      vars.loopFunctions[i][0](time);
    }
    

    // Delta time is sometimes needed for certain updates
    //const delta = this.clock.getDelta();

    // Call any vendor or module frame updates here
    TWEEN.update();
    this.controls.threeControls.update();

    // RAF
    if(!vars.isPaused)
    requestAnimationFrame(this.render.bind(this)); // Bind the main class instead of window object
  }
}
